create database nov9th;
use nov9th
select * from fact;

select * from Product;
--1. Display the number of states present in the LocationTable.
select count(state) as CountState from Location;
--2. How many products are of regular type?
select count(*)as regulartype from Product where type='regular';

--3. How much spending has been done on marketing of product ID 1?
select sum(Marketing) as spendingonMarketing from fact where ProductId=1; 
--4. What is the minimum sales of a product?
select min(sales) as MininumSales from fact;
--5. Display the max Cost of Good Sold (COGS).
select Max(cogs) from fact;
--6. Display the details of the product where product type is coffee.
select * from Product where Product_Type ='coffee';

--7. Display the details where total expenses are greater than 40.
select * from fact where Total_Expenses >40;

--8. What is the average sales in area code 719?
select avg(sales) from fact where Area_Code=719;

--9. Find out the total profit generated by Colorado state
select sum(profit) as totalProfit from fact join 
Location on fact.Area_Code=Location.Area_Code where State ='Colorado';
--10. Display the average inventory for each product ID
select ProductId ,avg(Inventory) as Avg_Inventory from fact
group by ProductId
order by ProductId;

--11.Display state in a sequential order in a Location Table.--
select * from Location
 order by state
 select distinct(state) from Location order by state; 

 --12. Display the average budget of the Product where the average budget
--margin should be greater than 100.
select avg(Budget_Margin) from fact where Budget_Margin>100;

--13. What is the total sales done on date 2010-01-01?
select * from fact;
select sum(sales) from fact where Date='2010-01-01';

--14. Display the average total expense of each product ID on an individual date.
select ProductId,Date,Avg(total_expenses) as total_avg_expenses from fact
group by ProductId,Date;

--15. Display the table with the following attributes such as date, product ID,
--product_type, product, sales, profit, state, area_code.
select date,f.ProductId,Product_Type,Product,Sales,Profit,state,f.Area_Code from fact as F
join Product as p
on f.ProductId=p.ProductId
join Location as l
on f.Area_Code=l.Area_Code;

--16. Display the rank without any gap to show the sales wise rank.
select sales,DENSE_RANK() over(order by sales desc) as Rank_sales from fact

--17. Find the state wise profit and sales
select State, sum(profit) as totalProfit,sum(sales) as total_sales from fact join Location on fact.Area_Code =Location.Area_Code
group by State

--18. Find the state wise profit and sales along with the product name.
select state,Product,sum(profit) as totalProfit,sum(sales) as total_sales from fact
join Product
on Product.ProductId =fact.ProductId
group by State,Product
order by State

--19.If there is an increase in sales of 5%, calculate the increasedsales.
select sales,Sales*1.05 as increasedSakes from fact

--20. Find the maximum profit along with the product ID and producttype
select Product.ProductId,Product_Type, Max(profit) as Max_Profit from fact
join Product
on fact.ProductId=Product.ProductId
group by Product.ProductId,Product_Type

--21.Create a stored procedure to fetch the result according to the product type
from Product Table.
create procedure pt @ptype varchar(50)
as
begin
select * from Product where Product_Type=@ptype
end
exec pt 'Tea'
--22. Write a query by creating a condition in which if the total expenses is less than
--60 then it is a profit or else loss.

select Total_Expenses,
case 
when Total_Expenses <60 then 'Profit'
else 'loss'
end as profitorloss
from fact

--23. Give the total weekly sales value with the date and product ID details. Use
--roll-up to pull the data in hierarchical order.

select DATEPART(WEEK,date) as weekno,ProductId,SUM(sales)  from fact
group by rollup(DATEPART(WEEK,date),ProductId)

--24. Apply union and intersection operator on the tables which consist of
--attribute area code.
select area_code from fact 
union 
select area_code from Location
select area_code from fact
intersection`
select area_code from Location

--25. Create a user-defined function for the product table to fetch a particular
--product type based upon the userâ€™s preference

create function udfpt (@ptype varchar(50))
returns table
as
return(select * from Product where Product_Type=@ptype)
select * from udfpt('Tea')
--26. Change the product type from coffee to tea where product ID is 1 and undo
--it.
select * from Product
begin transaction
update Product
set Product_Type ='tea'
where ProductId=1
rollback transaction
--27. Display the date, product ID and sales where total expenses are
--between 100 to 200.
select Date,ProductId,Sales, Total_Expenses from fact
where Total_Expenses between 100 and 200;
--28. Delete the records in the Product Table for regular type.
delete from Product where Type ='Regular';
--29. Display the ASCII value of the fifth character from the columnProduct.
select ASCII (SUBSTRING(Product,5,1)) as ascii_value from Product 
select * from Product